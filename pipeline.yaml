trigger: none

parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  default: 'dta'
  values:
  - dta
  - at
  - demo
  - test
  - test2
  - prod

resources:
  repositories:
  - repository: das-hub-infrastructure
    type: github
    endpoint: SkillsFundingAgency
    name: SkillsFundingAgency/das-hub-infrastructure
    # ref: main

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: DTA
  displayName: 'Deploy to DTA Environment'
  condition: eq('${{ parameters.environment }}', 'dta')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: Dev-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to DTA'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |+
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi
          ls -a 
          echo "=============================================="
          cat ./config/hub.template.json
          echo "=============================================="
          git branch --show-current
          echo "=============================================="
          cat ./pipeline.yaml
          echo "=============================================="
          ls -a ./templates
          echo "=============================================="

          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \  
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        networkRuleCollectionGroupName=NetworkGroup \
                        applicationRuleCollectionGroupName=AppGroup \
                        rulesFileUri="@./config/firewall_rules.json"                   

                      
- stage: AT
  displayName: 'Deploy to AT Environment'
  condition: eq('${{ parameters.environment }}', 'at')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: AT-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to AT'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |+
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi

          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        rulesFileUri="@./firewall_rules.json"                        


- stage: Demo
  displayName: 'Deploy to Demo Environment'
  condition: eq('${{ parameters.environment }}', 'demo')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: Demo-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to Demo'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |+
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi

          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        rulesFileUri="@./firewall_rules.json"                        


- stage: Test
  displayName: 'Deploy to Test Environment'
  condition: eq('${{ parameters.environment }}', 'test')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: Test-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to Test'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |+
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi

          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        rulesFileUri="@./firewall_rules.json"                        


- stage: Test2
  displayName: 'Deploy to Test2 Environment'
  condition: eq('${{ parameters.environment }}', 'test2')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: Test2-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to Test2'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |+
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi

          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        rulesFileUri="@./firewall_rules.json"                        



                  
- stage: Prod
  displayName: 'Deploy to Prod Environment'
  condition: eq('${{ parameters.environment }}', 'prod')
  variables:
  - name: selectedEnvironment
    value: ${{ parameters.environment }}
  - group: Prod-HubVariables
  jobs:
  - job: DeployARMTemplate
    displayName: 'Deploy ARM Template to Prod'
    steps:
    - checkout: das-hub-infrastructure
      displayName: 'Checkout Repository'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'SFA-DAS-DevTest-ARM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if resource group exists, create if not
          resourceGroupExists=$(az group exists --name $(resourceGroupName))

          if [ "$resourceGroupExists" = false ]; then
            echo "Resource group $(resourceGroupName) doesn't exist. Creating..."
            az group create --name $(resourceGroupName) --location $(location)  --tags "Environment=Dev/Test" "Product=AS Manage your Apprenticeships" "Parent Business=Apprenticeships" "Portfolio=Education and Skills Funding Agency" "Product=AS Manage your Apprenticeships" "Service=Apprenticeships" "Service Line=Apprenticeships" "Service Offering=AS Manage your Apprenticeships"
            sleep 30
          else
            echo "Resource group $(resourceGroupName) already exists."
          fi

          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file config/hub.template.json \
            --parameters armVnetName=$(armVnetName) \
                        armVnetAddressSpaceCIDR=$(armVnetAddressSpaceCIDR) \
                        subnetName=$(subnetName) \
                        subnetPrefix=$(subnetPrefix) \
                        publicIPAddressName=$(publicIPAddressName) \
                        natGatewayName=$(natGatewayName) \
                        location=$(location) \
                        firewallPublicIpName=$(firewallPublicIpName) \
                        firewallName=$(firewallName) \
                        firewallPolicy1Name=$(firewallPolicy1Name) \
                        firewallPolicy2Name=$(firewallPolicy2Name) \
                        rulesFileUri="@./firewall_rules.json"                        
